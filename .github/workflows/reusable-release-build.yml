name: Release Build

permissions: {}

on:
  workflow_call:
    inputs:
      version: # Should be valid semver or 'patch', 'minor', 'major', 'commit'. See scripts/misc/bump-version.js for details.
        type: string
        default: 'noop'

jobs:
  build-binding:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            build: pnpm ci:build-release-binding --target x86_64-apple-darwin

          - os: macos-latest
            target: aarch64-apple-darwin
            build: |
              export CARGO_BUILD_TARGET=aarch64-apple-darwin;
              pnpm ci:build-release-binding --target aarch64-apple-darwin

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm ci:build-release-binding --target x86_64-pc-windows-msvc

          - os: windows-latest
            target: i686-pc-windows-msvc
            build: |
              export CARGO_BUILD_TARGET=i686-pc-windows-msvc;
              pnpm ci:build-release-binding --target i686-pc-windows-msvc

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              export CARGO_BUILD_TARGET=aarch64-pc-windows-msvc;
              pnpm ci:build-release-binding --target aarch64-pc-windows-msvc

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu;
              export CC=clang;
              pnpm ci:build-release-binding --target x86_64-unknown-linux-gnu --use-napi-cross

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: pnpm ci:build-release-binding --target x86_64-unknown-linux-musl -x

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: |
              export CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu;
              export CC=clang;
              pnpm ci:build-release-binding --use-napi-cross --target aarch64-unknown-linux-gnu

          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: |
              export CARGO_BUILD_TARGET=armv7-unknown-linux-gnueabihf;
              export CC=clang;
              pnpm ci:build-release-binding --target armv7-unknown-linux-gnueabihf --use-napi-cross

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: |
              export CARGO_BUILD_TARGET=aarch64-unknown-linux-musl;
              pnpm ci:build-release-binding -x --target aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: wasm32-wasip1-threads
            build: |
              export CARGO_BUILD_TARGET=wasm32-wasip1-threads;
              pnpm --filter rolldown build-binding:wasi:release
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: release-build

      - name: Rustup Adds Target
        run: rustup target add ${{ matrix.target }}

      - uses: goto-bus-stop/setup-zig@abea47f85e598557f500fa1fd2ab7464fcb39406 # v2.2.1
        if: ${{ contains(matrix.target, 'musl') }}
        with:
          version: 0.13.0

      - uses: taiki-e/install-action@f1390fd0d8205ae79e5e57b1d1e300dceeb4163e # v2.49.44
        if: ${{ contains(matrix.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild

      # https://github.com/nodejs/node-gyp/issues/2869
      - name: Setup python
        run: pip install setuptools
        if: ${{ matrix.os == 'macos-latest' }}

      - name: Setup Node
        uses: ./.github/actions/setup-node

      - name: Build Binding
        run: ${{ matrix.build }}
        shell: bash

      - name: Upload Binding Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: error
          name: bindings-${{ matrix.target }}
          path: |
            packages/rolldown/src/rolldown-binding.*.node
            packages/rolldown/src/rolldown-binding.*.wasm

  build-freebsd:
    name: Build FreeBSD
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - name: Build
        id: build
        uses: cross-platform-actions/action@fe0167d8082ac584754ef3ffb567fded22642c7d # v0.27.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: '14.2'
          memory: 8G
          cpu_count: 3
          environment_variables: 'DEBUG RUSTUP_IO_THREADS'
          shell: bash
          run: |
            sudo pkg install -y -f curl node libnghttp2 npm cmake
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source "$HOME/.cargo/env"
            rustup toolchain install
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            pwd
            ls -lah
            whoami
            env
            sudo corepack enable
            sudo npm i -g corepack@latest # use a newer corepack due to https://github.com/nodejs/corepack/issues/612
            pnpm install
            pnpm ci:build-release-binding --target x86_64-unknown-freebsd
            rm -rf node_modules
            rm -rf target
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bindings-x86_64-unknown-freebsd
          path: ./packages/rolldown/src/rolldown-binding.*.node
          if-no-files-found: error

  build-node-packages:
    strategy:
      fail-fast: false
    name: Build Node Package
    runs-on: ubuntu-latest
    env:
      RELEASING: 'true'
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - name: Setup Node
        uses: ./.github/actions/setup-node

      - name: Build Node binding
        # This binary is only used to build the node package itself. It's won't be published.
        run: pnpm --filter rolldown build-binding

      - name: Determine Version
        if: ${{ inputs.version != 'noop' }}
        run: node --import @oxc-node/core/register ./scripts/misc/bump-version.js ${ROLLDOWN_VERSION}
        env:
          ROLLDOWN_VERSION: ${{ inputs.version }}

      - name: Build Node Packages
        # Binaries are built in the previous steps. Unlike in local development, we only need to build the node package itself.
        run: pnpm --filter rolldown build-node

      - name: Build Type Definitions
        run: pnpm --filter rolldown build-types

      - name: Upload Node Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: error
          name: node-artifact
          path: |
            packages/rolldown/dist/**

      - name: Upload `rolldown-version.txt`
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: warn
          name: rolldown-version
          path: |
            rolldown-version.txt

  build-rolldown-wasi:
    strategy:
      fail-fast: false
    name: Build `@rolldown/wasi` Package
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          tools: just
          cache-key: release-build-wasi

      - name: Add WASI target
        run: rustup target add wasm32-wasip1-threads

      - name: Setup Node
        uses: ./.github/actions/setup-node

      - name: Build Node binding
        # This binary is only used to build the node package itself. It's won't be published.
        run: pnpm --filter rolldown build-binding

      - name: Determine Version
        if: ${{ inputs.version != 'noop' }}
        run: node --import @oxc-node/core/register ./scripts/misc/bump-version.js ${ROLLDOWN_VERSION}
        env:
          ROLLDOWN_VERSION: ${{ inputs.version }}

      - name: Build `@rolldown/wasi`
        # Binaries are built in the previous steps. Unlike in local development, we only need to build the node package itself.
        run: pnpm --filter "@rolldown/wasi" build:release

      - name: Build Type Definitions
        run: pnpm --filter "@rolldown/wasi" build-types

      - name: Upload `@rolldown/wasi` Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: error
          name: wasi-artifact
          path: |
            packages/wasi/dist/**
