---
source: crates/rolldown_testing/src/case/case.rs
expression: content
input_file: crates/rolldown/tests/esbuild/dce/disable_tree_shaking
---
# Assets

## entry_jsx.mjs

```js


//#region remove-me.js
var remove_me_default = "unused";

//#endregion
//#region keep-me/index.js
console.log("side effects");

//#endregion
//#region ../../../../../../node_modules/react/cjs/react-jsx-runtime.production.min.js
var require_react_jsx_runtime_production_min = __commonJSMin((exports, module) => {
	var f = require("react"), k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = {
		key: !0,
		ref: !0,
		__self: !0,
		__source: !0
	};
	function q(c, a, g) {
		var b, d = {}, e = null, h = null;
		void 0 !== g && (e = "" + g);
		void 0 !== a.key && (e = "" + a.key);
		void 0 !== a.ref && (h = a.ref);
		for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
		if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
		return {
			$$typeof: k,
			type: c,
			key: e,
			ref: h,
			props: d,
			_owner: n.current
		};
	}
	exports.Fragment = l;
	exports.jsx = q;
	exports.jsxs = q;
});

//#endregion
//#region ../../../../../../node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJSMin((exports, module) => {
	if (process.env.NODE_ENV !== "production") {
		(function() {
			"use strict";
			var React = require("react");
			var REACT_ELEMENT_TYPE = Symbol.for("react.element");
			var REACT_PORTAL_TYPE = Symbol.for("react.portal");
			var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
			var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
			var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
			var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
			var REACT_CONTEXT_TYPE = Symbol.for("react.context");
			var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
			var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
			var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
			var REACT_MEMO_TYPE = Symbol.for("react.memo");
			var REACT_LAZY_TYPE = Symbol.for("react.lazy");
			var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
			var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
			var FAUX_ITERATOR_SYMBOL = "@@iterator";
			function getIteratorFn(maybeIterable) {
				if (maybeIterable === null || typeof maybeIterable !== "object") {
					return null;
				}
				var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
				if (typeof maybeIterator === "function") {
					return maybeIterator;
				}
				return null;
			}
			var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
			function error(format) {
				{
					{
						for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
							args[_key2 - 1] = arguments[_key2];
						}
						printWarning("error", format, args);
					}
				}
			}
			function printWarning(level, format, args) {
				{
					var ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
					var stack = ReactDebugCurrentFrame$2.getStackAddendum();
					if (stack !== "") {
						format += "%s";
						args = args.concat([stack]);
					}
					var argsWithFormat = args.map(function(item) {
						return String(item);
					});
					argsWithFormat.unshift("Warning: " + format);
					Function.prototype.apply.call(console[level], console, argsWithFormat);
				}
			}
			var enableScopeAPI = false;
			var enableCacheElement = false;
			var enableTransitionTracing = false;
			var enableLegacyHidden = false;
			var enableDebugTracing = false;
			var REACT_MODULE_REFERENCE;
			{
				REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
			}
			function isValidElementType(type) {
				if (typeof type === "string" || typeof type === "function") {
					return true;
				}
				if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
					return true;
				}
				if (typeof type === "object" && type !== null) {
					if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
						return true;
					}
				}
				return false;
			}
			function getWrappedName(outerType, innerType, wrapperName) {
				var displayName = outerType.displayName;
				if (displayName) {
					return displayName;
				}
				var functionName = innerType.displayName || innerType.name || "";
				return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
			}
			function getContextName(type) {
				return type.displayName || "Context";
			}
			function getComponentNameFromType(type) {
				if (type == null) {
					return null;
				}
				{
					if (typeof type.tag === "number") {
						error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
					}
				}
				if (typeof type === "function") {
					return type.displayName || type.name || null;
				}
				if (typeof type === "string") {
					return type;
				}
				switch (type) {
					case REACT_FRAGMENT_TYPE: return "Fragment";
					case REACT_PORTAL_TYPE: return "Portal";
					case REACT_PROFILER_TYPE: return "Profiler";
					case REACT_STRICT_MODE_TYPE: return "StrictMode";
					case REACT_SUSPENSE_TYPE: return "Suspense";
					case REACT_SUSPENSE_LIST_TYPE: return "SuspenseList";
				}
				if (typeof type === "object") {
					switch (type.$$typeof) {
						case REACT_CONTEXT_TYPE:
							var context = type;
							return getContextName(context) + ".Consumer";
						case REACT_PROVIDER_TYPE:
							var provider = type;
							return getContextName(provider._context) + ".Provider";
						case REACT_FORWARD_REF_TYPE: return getWrappedName(type, type.render, "ForwardRef");
						case REACT_MEMO_TYPE:
							var outerName = type.displayName || null;
							if (outerName !== null) {
								return outerName;
							}
							return getComponentNameFromType(type.type) || "Memo";
						case REACT_LAZY_TYPE: {
							var lazyComponent = type;
							var payload = lazyComponent._payload;
							var init = lazyComponent._init;
							try {
								return getComponentNameFromType(init(payload));
							} catch (x) {
								return null;
							}
						}
					}
				}
				return null;
			}
			var assign = Object.assign;
			var disabledDepth = 0;
			var prevLog;
			var prevInfo;
			var prevWarn;
			var prevError;
			var prevGroup;
			var prevGroupCollapsed;
			var prevGroupEnd;
			function disabledLog() {}
			disabledLog.__reactDisabledLog = true;
			function disableLogs() {
				{
					if (disabledDepth === 0) {
						prevLog = console.log;
						prevInfo = console.info;
						prevWarn = console.warn;
						prevError = console.error;
						prevGroup = console.group;
						prevGroupCollapsed = console.groupCollapsed;
						prevGroupEnd = console.groupEnd;
						var props = {
							configurable: true,
							enumerable: true,
							value: disabledLog,
							writable: true
						};
						Object.defineProperties(console, {
							info: props,
							log: props,
							warn: props,
							error: props,
							group: props,
							groupCollapsed: props,
							groupEnd: props
						});
					}
					disabledDepth++;
				}
			}
			function reenableLogs() {
				{
					disabledDepth--;
					if (disabledDepth === 0) {
						var props = {
							configurable: true,
							enumerable: true,
							writable: true
						};
						Object.defineProperties(console, {
							log: assign({}, props, {value: prevLog}),
							info: assign({}, props, {value: prevInfo}),
							warn: assign({}, props, {value: prevWarn}),
							error: assign({}, props, {value: prevError}),
							group: assign({}, props, {value: prevGroup}),
							groupCollapsed: assign({}, props, {value: prevGroupCollapsed}),
							groupEnd: assign({}, props, {value: prevGroupEnd})
						});
					}
					if (disabledDepth < 0) {
						error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
					}
				}
			}
			var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
			var prefix;
			function describeBuiltInComponentFrame(name, source, ownerFn) {
				{
					if (prefix === undefined) {
						try {
							throw Error();
						} catch (x) {
							var match = (x.stack.trim()).match(/\n( *(at )?)/);
							prefix = match && match[1] || "";
						}
					}
					return "\n" + prefix + name;
				}
				var match;
			}
			var reentry = false;
			var componentFrameCache;
			{
				var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
				componentFrameCache = new PossiblyWeakMap();
			}
			function describeNativeComponentFrame(fn, construct) {
				if (!fn || reentry) {
					return "";
				}
				{
					var frame = componentFrameCache.get(fn);
					if (frame !== undefined) {
						return frame;
					}
				}
				var control;
				reentry = true;
				var previousPrepareStackTrace = Error.prepareStackTrace;
				Error.prepareStackTrace = undefined;
				var previousDispatcher;
				{
					previousDispatcher = ReactCurrentDispatcher.current;
					ReactCurrentDispatcher.current = null;
					disableLogs();
				}
				try {
					if (construct) {
						var Fake = function() {
							throw Error();
						};
						Object.defineProperty(Fake.prototype, "props", {set: function() {
							throw Error();
						}});
						if (typeof Reflect === "object" && Reflect.construct) {
							try {
								Reflect.construct(Fake, []);
							} catch (x) {
								control = x;
							}
							Reflect.construct(fn, [], Fake);
						} else {
							try {
								Fake.call();
							} catch (x) {
								control = x;
							}
							fn.call(Fake.prototype);
						}
					} else {
						try {
							throw Error();
						} catch (x) {
							control = x;
						}
						fn();
					}
				} catch (sample) {
					if (sample && control && typeof sample.stack === "string") {
						var sampleLines = sample.stack.split("\n");
						var controlLines = control.stack.split("\n");
						var s = sampleLines.length - 1;
						var c = controlLines.length - 1;
						while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
							c--;
						}
						for (; s >= 1 && c >= 0; s--, c--) {
							if (sampleLines[s] !== controlLines[c]) {
								if (s !== 1 || c !== 1) {
									do {
										s--;
										c--;
										if (c < 0 || sampleLines[s] !== controlLines[c]) {
											var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
											if (fn.displayName && _frame.includes("<anonymous>")) {
												_frame = _frame.replace("<anonymous>", fn.displayName);
											}
											{
												if (typeof fn === "function") {
													componentFrameCache.set(fn, _frame);
												}
											}
											return _frame;
										}
									} while (s >= 1 && c >= 0);
								}
								break;
							}
						}
					}
				}
 finally {
					reentry = false;
					{
						ReactCurrentDispatcher.current = previousDispatcher;
						reenableLogs();
					}
					Error.prepareStackTrace = previousPrepareStackTrace;
				}
				var name = fn ? fn.displayName || fn.name : "";
				var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
				{
					if (typeof fn === "function") {
						componentFrameCache.set(fn, syntheticFrame);
					}
				}
				return syntheticFrame;
			}
			function describeFunctionComponentFrame(fn, source, ownerFn) {
				{
					return describeNativeComponentFrame(fn, false);
				}
			}
			function shouldConstruct(Component) {
				var prototype = Component.prototype;
				return !!(prototype && prototype.isReactComponent);
			}
			function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
				if (type == null) {
					return "";
				}
				if (typeof type === "function") {
					{
						return describeNativeComponentFrame(type, shouldConstruct(type));
					}
				}
				if (typeof type === "string") {
					return describeBuiltInComponentFrame(type);
				}
				switch (type) {
					case REACT_SUSPENSE_TYPE: return describeBuiltInComponentFrame("Suspense");
					case REACT_SUSPENSE_LIST_TYPE: return describeBuiltInComponentFrame("SuspenseList");
				}
				if (typeof type === "object") {
					switch (type.$$typeof) {
						case REACT_FORWARD_REF_TYPE: return describeFunctionComponentFrame(type.render);
						case REACT_MEMO_TYPE: return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
						case REACT_LAZY_TYPE: {
							var lazyComponent = type;
							var payload = lazyComponent._payload;
							var init = lazyComponent._init;
							try {
								return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
							} catch (x) {}
						}
					}
				}
				return "";
			}
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			var loggedTypeFailures = {};
			var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
			function setCurrentlyValidatingElement(element) {
				{
					if (element) {
						var owner = element._owner;
						var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
						ReactDebugCurrentFrame.setExtraStackFrame(stack);
					} else {
						ReactDebugCurrentFrame.setExtraStackFrame(null);
					}
				}
			}
			function checkPropTypes(typeSpecs, values, location, componentName, element) {
				{
					var has = Function.call.bind(hasOwnProperty);
					for (var typeSpecName in typeSpecs) {
						if (has(typeSpecs, typeSpecName)) {
							var error$1 = void 0;
							try {
								if (typeof typeSpecs[typeSpecName] !== "function") {
									var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
									err.name = "Invariant Violation";
									throw err;
								}
								error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
							} catch (ex) {
								error$1 = ex;
							}
							if (error$1 && !(error$1 instanceof Error)) {
								setCurrentlyValidatingElement(element);
								error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
								setCurrentlyValidatingElement(null);
							}
							if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
								loggedTypeFailures[error$1.message] = true;
								setCurrentlyValidatingElement(element);
								error("Failed %s type: %s", location, error$1.message);
								setCurrentlyValidatingElement(null);
							}
						}
					}
				}
			}
			var isArrayImpl = Array.isArray;
			function isArray(a) {
				return isArrayImpl(a);
			}
			function typeName(value) {
				{
					var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
					var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
					return type;
				}
				var hasToStringTag, type;
			}
			function willCoercionThrow(value) {
				{
					try {
						testStringCoercion(value);
						return false;
					} catch (e) {
						return true;
					}
				}
			}
			function testStringCoercion(value) {
				return "" + value;
			}
			function checkKeyStringCoercion(value) {
				{
					if (willCoercionThrow(value)) {
						error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
						return testStringCoercion(value);
					}
				}
			}
			var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
			var RESERVED_PROPS = {
				key: true,
				ref: true,
				__self: true,
				__source: true
			};
			var specialPropKeyWarningShown;
			var specialPropRefWarningShown;
			var didWarnAboutStringRefs;
			{
				didWarnAboutStringRefs = {};
			}
			function hasValidRef(config) {
				{
					if (hasOwnProperty.call(config, "ref")) {
						var getter = (Object.getOwnPropertyDescriptor(config, "ref")).get;
						if (getter && getter.isReactWarning) {
							return false;
						}
					}
				}
				return config.ref !== undefined;
			}
			function hasValidKey(config) {
				{
					if (hasOwnProperty.call(config, "key")) {
						var getter = (Object.getOwnPropertyDescriptor(config, "key")).get;
						if (getter && getter.isReactWarning) {
							return false;
						}
					}
				}
				return config.key !== undefined;
			}
			function warnIfStringRefCannotBeAutoConverted(config, self) {
				{
					if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
						var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
						if (!didWarnAboutStringRefs[componentName]) {
							error("Component \"%s\" contains the string ref \"%s\". " + "Support for string refs will be removed in a future major release. " + "This case cannot be automatically converted to an arrow function. " + "We ask you to manually fix this case by using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
							didWarnAboutStringRefs[componentName] = true;
						}
					}
				}
			}
			function defineKeyPropWarningGetter(props, displayName) {
				{
					var warnAboutAccessingKey = function() {
						if (!specialPropKeyWarningShown) {
							specialPropKeyWarningShown = true;
							error("%s: `key` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
						}
					};
					warnAboutAccessingKey.isReactWarning = true;
					Object.defineProperty(props, "key", {
						get: warnAboutAccessingKey,
						configurable: true
					});
				}
			}
			function defineRefPropWarningGetter(props, displayName) {
				{
					var warnAboutAccessingRef = function() {
						if (!specialPropRefWarningShown) {
							specialPropRefWarningShown = true;
							error("%s: `ref` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
						}
					};
					warnAboutAccessingRef.isReactWarning = true;
					Object.defineProperty(props, "ref", {
						get: warnAboutAccessingRef,
						configurable: true
					});
				}
			}
			var ReactElement = function(type, key, ref, self, source, owner, props) {
				var element = {
					$$typeof: REACT_ELEMENT_TYPE,
					type: type,
					key: key,
					ref: ref,
					props: props,
					_owner: owner
				};
				{
					element._store = {};
					Object.defineProperty(element._store, "validated", {
						configurable: false,
						enumerable: false,
						writable: true,
						value: false
					});
					Object.defineProperty(element, "_self", {
						configurable: false,
						enumerable: false,
						writable: false,
						value: self
					});
					Object.defineProperty(element, "_source", {
						configurable: false,
						enumerable: false,
						writable: false,
						value: source
					});
					if (Object.freeze) {
						Object.freeze(element.props);
						Object.freeze(element);
					}
				}
				return element;
			};
			function jsxDEV(type, config, maybeKey, source, self) {
				{
					var propName;
					var props = {};
					var key = null;
					var ref = null;
					if (maybeKey !== undefined) {
						{
							checkKeyStringCoercion(maybeKey);
						}
						key = "" + maybeKey;
					}
					if (hasValidKey(config)) {
						{
							checkKeyStringCoercion(config.key);
						}
						key = "" + config.key;
					}
					if (hasValidRef(config)) {
						ref = config.ref;
						warnIfStringRefCannotBeAutoConverted(config, self);
					}
					for (propName in config) {
						if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
							props[propName] = config[propName];
						}
					}
					if (type && type.defaultProps) {
						var defaultProps = type.defaultProps;
						for (propName in defaultProps) {
							if (props[propName] === undefined) {
								props[propName] = defaultProps[propName];
							}
						}
					}
					if (key || ref) {
						var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
						if (key) {
							defineKeyPropWarningGetter(props, displayName);
						}
						if (ref) {
							defineRefPropWarningGetter(props, displayName);
						}
					}
					return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
				}
				var propName, props, key, ref, defaultProps, displayName;
			}
			var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
			var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
			function setCurrentlyValidatingElement$1(element) {
				{
					if (element) {
						var owner = element._owner;
						var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
						ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
					} else {
						ReactDebugCurrentFrame$1.setExtraStackFrame(null);
					}
				}
			}
			var propTypesMisspellWarningShown;
			{
				propTypesMisspellWarningShown = false;
			}
			function isValidElement(object) {
				{
					return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
				}
			}
			function getDeclarationErrorAddendum() {
				{
					if (ReactCurrentOwner$1.current) {
						var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
						if (name) {
							return "\n\nCheck the render method of `" + name + "`.";
						}
					}
					return "";
				}
				var name;
			}
			function getSourceInfoErrorAddendum(source) {
				{
					if (source !== undefined) {
						var fileName = source.fileName.replace(/^.*[\\\/]/, "");
						var lineNumber = source.lineNumber;
						return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
					}
					return "";
				}
				var fileName, lineNumber;
			}
			var ownerHasKeyUseWarning = {};
			function getCurrentComponentErrorInfo(parentType) {
				{
					var info = getDeclarationErrorAddendum();
					if (!info) {
						var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
						if (parentName) {
							info = "\n\nCheck the top-level render call using <" + parentName + ">.";
						}
					}
					return info;
				}
				var info, parentName;
			}
			function validateExplicitKey(element, parentType) {
				{
					if (!element._store || element._store.validated || element.key != null) {
						return;
					}
					element._store.validated = true;
					var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
					if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
						return;
					}
					ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
					var childOwner = "";
					if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
						childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
					}
					setCurrentlyValidatingElement$1(element);
					error("Each child in a list should have a unique \"key\" prop." + "%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
					setCurrentlyValidatingElement$1(null);
				}
			}
			function validateChildKeys(node, parentType) {
				{
					if (typeof node !== "object") {
						return;
					}
					if (isArray(node)) {
						for (var i = 0; i < node.length; i++) {
							var child = node[i];
							if (isValidElement(child)) {
								validateExplicitKey(child, parentType);
							}
						}
					} else if (isValidElement(node)) {
						if (node._store) {
							node._store.validated = true;
						}
					} else if (node) {
						var iteratorFn = getIteratorFn(node);
						if (typeof iteratorFn === "function") {
							if (iteratorFn !== node.entries) {
								var iterator = iteratorFn.call(node);
								var step;
								while (!(step = iterator.next()).done) {
									if (isValidElement(step.value)) {
										validateExplicitKey(step.value, parentType);
									}
								}
							}
						}
					}
				}
			}
			function validatePropTypes(element) {
				{
					var type = element.type;
					if (type === null || type === undefined || typeof type === "string") {
						return;
					}
					var propTypes;
					if (typeof type === "function") {
						propTypes = type.propTypes;
					} else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
						propTypes = type.propTypes;
					} else {
						return;
					}
					if (propTypes) {
						var name = getComponentNameFromType(type);
						checkPropTypes(propTypes, element.props, "prop", name, element);
					} else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
						propTypesMisspellWarningShown = true;
						var _name = getComponentNameFromType(type);
						error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
					}
					if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
						error("getDefaultProps is only used on classic React.createClass " + "definitions. Use a static property named `defaultProps` instead.");
					}
				}
			}
			function validateFragmentProps(fragment) {
				{
					var keys = Object.keys(fragment.props);
					for (var i = 0; i < keys.length; i++) {
						var key = keys[i];
						if (key !== "children" && key !== "key") {
							setCurrentlyValidatingElement$1(fragment);
							error("Invalid prop `%s` supplied to `React.Fragment`. " + "React.Fragment can only have `key` and `children` props.", key);
							setCurrentlyValidatingElement$1(null);
							break;
						}
					}
					if (fragment.ref !== null) {
						setCurrentlyValidatingElement$1(fragment);
						error("Invalid attribute `ref` supplied to `React.Fragment`.");
						setCurrentlyValidatingElement$1(null);
					}
				}
			}
			function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
				{
					var validType = isValidElementType(type);
					if (!validType) {
						var info = "";
						if (type === undefined || typeof type === "object" && type !== null && (Object.keys(type)).length === 0) {
							info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
						}
						var sourceInfo = getSourceInfoErrorAddendum(source);
						if (sourceInfo) {
							info += sourceInfo;
						} else {
							info += getDeclarationErrorAddendum();
						}
						var typeString;
						if (type === null) {
							typeString = "null";
						} else if (isArray(type)) {
							typeString = "array";
						} else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
							typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
							info = " Did you accidentally export a JSX literal instead of a component?";
						} else {
							typeString = typeof type;
						}
						error("React.jsx: type is invalid -- expected a string (for " + "built-in components) or a class/function (for composite " + "components) but got: %s.%s", typeString, info);
					}
					var element = jsxDEV(type, props, key, source, self);
					if (element == null) {
						return element;
					}
					if (validType) {
						var children = props.children;
						if (children !== undefined) {
							if (isStaticChildren) {
								if (isArray(children)) {
									for (var i = 0; i < children.length; i++) {
										validateChildKeys(children[i], type);
									}
									if (Object.freeze) {
										Object.freeze(children);
									}
								} else {
									error("React.jsx: Static children should always be an array. " + "You are likely explicitly calling React.jsxs or React.jsxDEV. " + "Use the Babel transform instead.");
								}
							} else {
								validateChildKeys(children, type);
							}
						}
					}
					if (type === REACT_FRAGMENT_TYPE) {
						validateFragmentProps(element);
					} else {
						validatePropTypes(element);
					}
					return element;
				}
				var validType, info, sourceInfo, typeString, element, children, i;
			}
			function jsxWithValidationStatic(type, props, key) {
				{
					return jsxWithValidation(type, props, key, true);
				}
			}
			function jsxWithValidationDynamic(type, props, key) {
				{
					return jsxWithValidation(type, props, key, false);
				}
			}
			var jsx = jsxWithValidationDynamic;
			var jsxs = jsxWithValidationStatic;
			exports.Fragment = REACT_FRAGMENT_TYPE;
			exports.jsx = jsx;
			exports.jsxs = jsxs;
		})();
	}
});

//#endregion
//#region ../../../../../../node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJSMin((exports, module) => {
	if (process.env.NODE_ENV === "production") {
		module.exports = require_react_jsx_runtime_production_min();
	} else {
		module.exports = require_react_jsx_runtime_development();
	}
});

//#endregion
//#region entry.jsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
function RemoveMe1() {}
let removeMe2 = 0;
class RemoveMe3 {}
function KeepMe1() {}
let keepMe2 = (0, import_jsx_runtime.jsx)(KeepMe1, {});
function keepMe3() {
	console.log("side effects");
}
let keepMe4 = /* @__PURE__ */ keepMe3();
let keepMe5 = pure();
let keepMe6 = some.fn();

//#endregion
```
