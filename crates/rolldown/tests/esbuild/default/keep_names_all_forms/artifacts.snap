---
source: crates/rolldown_testing/src/integration_test.rs
---
# warnings

## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
    ╭─[keep.js:2:10]
    │
  2 │ function fn() {}
    │          ─┬  
    │           ╰── `fn` has already been declared here
    │ 
 22 │ var [fn = function() {}] = [];
    │      ─┬  
    │       ╰── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
    ╭─[keep.js:2:10]
    │
  2 │ function fn() {}
    │          ─┬  
    │           ╰── `fn` has already been declared here
    │ 
 23 │ var { fn = function() {} } = {};
    │       ─┬  
    │        ╰── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
    ╭─[keep.js:2:10]
    │
  2 │ function fn() {}
    │          ─┬  
    │           ╰── `fn` has already been declared here
    │ 
 24 │ for (var [fn = function() {}] = []; ; ) ;
    │           ─┬  
    │            ╰── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
    ╭─[keep.js:2:10]
    │
  2 │ function fn() {}
    │          ─┬  
    │           ╰── `fn` has already been declared here
    │ 
 25 │ for (var { fn = function() {} } = {}; ; ) ;
    │            ─┬  
    │             ╰── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
    ╭─[keep.js:2:10]
    │
  2 │ function fn() {}
    │          ─┬  
    │           ╰── `fn` has already been declared here
    │ 
 26 │ for (var [fn = function() {}] in obj) ;
    │           ─┬  
    │            ╰── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
    ╭─[keep.js:2:10]
    │
  2 │ function fn() {}
    │          ─┬  
    │           ╰── `fn` has already been declared here
    │ 
 27 │ for (var { fn = function() {} } in obj) ;
    │            ─┬  
    │             ╰── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
    ╭─[keep.js:2:10]
    │
  2 │ function fn() {}
    │          ─┬  
    │           ╰── `fn` has already been declared here
    │ 
 28 │ for (var [fn = function() {}] of obj) ;
    │           ─┬  
    │            ╰── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
    ╭─[keep.js:2:10]
    │
  2 │ function fn() {}
    │          ─┬  
    │           ╰── `fn` has already been declared here
    │ 
 29 │ for (var { fn = function() {} } of obj) ;
    │            ─┬  
    │             ╰── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `fn` has already been declared
   ╭─[keep.js:2:10]
   │
 2 │ function fn() {}
   │          ─┬  
   │           ╰── `fn` has already been declared here
   │ 
 4 │ var fn = function() {};
   │     ─┬  
   │      ╰── It can not be redeclared here
───╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `foo` has already been declared
    ╭─[keep.js:3:10]
    │
  3 │ function foo(fn = function() {}) {}
    │          ─┬─  
    │           ╰─── `foo` has already been declared here
    │ 
 30 │ function foo([fn = function() {}]) {}
    │          ─┬─  
    │           ╰─── It can not be redeclared here
────╯

```
## PARSE_ERROR

```text
[PARSE_ERROR] Warning: Identifier `foo` has already been declared
    ╭─[keep.js:3:10]
    │
  3 │ function foo(fn = function() {}) {}
    │          ─┬─  
    │           ╰─── `foo` has already been declared here
    │ 
 31 │ function foo({ fn = function() {} }) {}
    │          ─┬─  
    │           ╰─── It can not be redeclared here
────╯

```
# Assets

## do-not-keep.js

```js

```
## keep.js

```js

//#region keep.js
function fn() {}
var fn = function() {};
var obj = { "f n": function() {} };
fn = function() {};
fn ||= function() {};
fn &&= function() {};
fn ??= function() {};
var [fn = function() {}] = [];
var { fn = function() {} } = {};
for (var [fn = function() {}] = [];;);
for (var { fn = function() {} } = {};;);
for (var [fn = function() {}] in obj);
for (var { fn = function() {} } in obj);
for (var [fn = function() {}] of obj);
for (var { fn = function() {} } of obj);
[fn = function() {}] = [];
({fn = function() {}} = {});

//#endregion
```
