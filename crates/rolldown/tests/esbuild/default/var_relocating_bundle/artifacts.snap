---
source: crates/rolldown/tests/common/case.rs
expression: content
input_file: crates/rolldown/tests/esbuild/default/var_relocating_bundle
---
# Assets

## function-nested_js.mjs

```js
// function-nested.js
function x() {
	if (true) {
		var a;
		for (var b; 0;);
		// for (var { c, x: [d] } = {}; 0;);
		for (var e of []);
		for (var { f, x: [g] } of []);
		for (var h in {});
		// for (var i = 1 in {});
		for (var { j, x: [k] } in {});
		function l() {}
	}
}
x()
```
## function_js.mjs

```js
// function.js
function x() {
	var a;
	for (var b; 0;);
	// for (var { c, x: [d] } = {}; 0;);
	for (var e of []);
	for (var { f, x: [g] } of []);
	for (var h in {});
	// for (var i = 1 in {});
	for (var { j, x: [k] } in {});
	function l() {}
}
x()
```
## let_js.mjs

```js
// let.js
if (true) {
	let a;
	for (let b; 0;);
	// for (let { c, x: [d] } = {}; 0;);
	for (let e of []);
	for (let { f, x: [g] } of []);
	for (let h in {});
	// for (let i = 1 in {});
	for (let { j, x: [k] } in {});
}
```
## nested_js.mjs

```js
// nested.js
if (true) {
	var a;
	for (var b; 0;);
	// for (var { c, x: [d] } = {}; 0;);
	for (var e of []);
	for (var { f, x: [g] } of []);
	for (var h in {});
	// for (var i = 1 in {});
	for (var { j, x: [k] } in {});
	function l() {}
}
```
## top-level_js.mjs

```js
// top-level.js
var a;
for (var b; 0;);
// for (var { c, x: [d] } = {}; 0;);
for (var e of []);
for (var { f, x: [g] } of []);
for (var h in {});
// for (var i = 1 in {}); //  the test case is error case, so we don't need to run it   
for (var { j, x: [k] } in {});
function l() {}
```
