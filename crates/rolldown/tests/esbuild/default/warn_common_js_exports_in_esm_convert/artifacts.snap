---
source: crates/rolldown_testing/src/integration_test.rs
---
# warnings

## COMMONJS_VARIABLE_IN_ESM

```text
[COMMONJS_VARIABLE_IN_ESM] Warning: The CommonJS `exports` variable is treated as a global variable in an ECMAScript module and may not work as expected
   ╭─[ cjs-in-esm.js:2:1 ]
   │
 1 │ export let foo = 1
   │ ───┬──  
   │    ╰──── This file is considered to be an ECMAScript module because of the `export` keyword here:
 2 │ exports.foo = 2
   │ ───┬───  
   │    ╰───── 
───╯

```
## COMMONJS_VARIABLE_IN_ESM

```text
[COMMONJS_VARIABLE_IN_ESM] Warning: The CommonJS `module` variable is treated as a global variable in an ECMAScript module and may not work as expected
   ╭─[ cjs-in-esm.js:3:1 ]
   │
 1 │ export let foo = 1
   │ ───┬──  
   │    ╰──── This file is considered to be an ECMAScript module because of the `export` keyword here:
   │ 
 3 │ module.exports = 3
   │ ───┬──  
   │    ╰──── 
───╯

```
## COMMONJS_VARIABLE_IN_ESM

```text
[COMMONJS_VARIABLE_IN_ESM] Warning: The CommonJS `module` variable is treated as a global variable in an ECMAScript module and may not work as expected
   ╭─[ cjs-in-esm2.js:2:1 ]
   │
 1 │ export let foo = 1
   │ ───┬──  
   │    ╰──── This file is considered to be an ECMAScript module because of the `export` keyword here:
 2 │ module.exports.bar = 3
   │ ───┬──  
   │    ╰──── 
───╯

```
## UNRESOLVED_IMPORT

```text
[UNRESOLVED_IMPORT] Warning: Could not resolve 'bar' in import-in-cjs.js
   ╭─[ import-in-cjs.js:1:21 ]
   │
 1 │ import { foo } from 'bar'
   │                     ──┬──  
   │                       ╰──── Module not found, treating it as an external dependency
───╯

```
# Assets

## cjs-in-esm.js

```js
"use strict";

//#region cjs-in-esm.js
let foo = 1;
exports.foo = 2;
module.exports = 3;

exports.foo = foo
```
## cjs-in-esm2.js

```js
"use strict";

//#region cjs-in-esm2.js
let foo = 1;
module.exports.bar = 3;

exports.foo = foo
```
## import-in-cjs.js

```js
//#region rolldown:runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
		key = keys[i];
		if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
			get: ((k) => from[k]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));

const bar = __toESM(require("bar"));

//#region import-in-cjs.js
exports.foo = bar.foo;
module.exports = bar.foo;
module.exports.bar = bar.foo;

```
## no-warnings-here.js

```js

//#region no-warnings-here.js
console.log(module, exports);

```
