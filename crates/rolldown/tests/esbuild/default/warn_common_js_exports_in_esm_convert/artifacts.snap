---
source: crates/rolldown_testing/src/integration_test.rs
snapshot_kind: text
---
# warnings

## COMMONJS_VARIABLE_IN_ESM

```text
[COMMONJS_VARIABLE_IN_ESM] Warning: The CommonJS `exports` variable is treated as a global variable in an ECMAScript module and may not work as expected
   ╭─[cjs-in-esm.js:2:1]
   │
 1 │ export let foo = 1
   │ ───┬──  
   │    ╰──── This file is considered to be an ECMAScript module because of the `export` keyword here:
 2 │ exports.foo = 2
   │ ───┬───  
   │    ╰───── 
───╯

```
## COMMONJS_VARIABLE_IN_ESM

```text
[COMMONJS_VARIABLE_IN_ESM] Warning: The CommonJS `module` variable is treated as a global variable in an ECMAScript module and may not work as expected
   ╭─[cjs-in-esm.js:3:1]
   │
 1 │ export let foo = 1
   │ ───┬──  
   │    ╰──── This file is considered to be an ECMAScript module because of the `export` keyword here:
   │ 
 3 │ module.exports = 3
   │ ───┬──  
   │    ╰──── 
───╯

```
## COMMONJS_VARIABLE_IN_ESM

```text
[COMMONJS_VARIABLE_IN_ESM] Warning: The CommonJS `module` variable is treated as a global variable in an ECMAScript module and may not work as expected
   ╭─[cjs-in-esm2.js:2:1]
   │
 1 │ export let foo = 1
   │ ───┬──  
   │    ╰──── This file is considered to be an ECMAScript module because of the `export` keyword here:
 2 │ module.exports.bar = 3
   │ ───┬──  
   │    ╰──── 
───╯

```
## UNRESOLVED_IMPORT

```text
[UNRESOLVED_IMPORT] Warning: Could not resolve 'bar' in import-in-cjs.js
   ╭─[import-in-cjs.js:1:21]
   │
 1 │ import { foo } from 'bar'
   │                     ──┬──  
   │                       ╰──── Module not found, treating it as an external dependency
───╯

```
# Assets

## cjs-in-esm.js

```js
"use strict";

//#region cjs-in-esm.js
let foo = 1;
exports.foo = 2;
module.exports = 3;

//#endregion
exports.foo = foo
```
## cjs-in-esm2.js

```js
"use strict";

//#region cjs-in-esm2.js
let foo = 1;
module.exports.bar = 3;

//#endregion
exports.foo = foo
```
## import-in-cjs.js

```js

const bar = __toESM(require("bar"));

//#region import-in-cjs.js
exports.foo = bar.foo;
module.exports = bar.foo;
module.exports.bar = bar.foo;

//#endregion
```
## no-warnings-here.js

```js

//#region no-warnings-here.js
console.log(module, exports);

//#endregion
```
