---
source: crates/rolldown_testing/src/integration_test.rs
---
# warnings

## UNRESOLVED_IMPORT

```text
[UNRESOLVED_IMPORT] Warning: Could not resolve '@remix-run/react' in entry.jsx
   ╭─[ entry.jsx:1:22 ]
   │
 1 │ import { Link } from "@remix-run/react"
   │                      ─────────┬────────  
   │                               ╰────────── Module not found, treating it as an external dependency
───╯

```
## UNRESOLVED_IMPORT

```text
[UNRESOLVED_IMPORT] Warning: Could not resolve 'react' in entry.jsx

```
# Assets

## entry.js

```js
"use strict";
//#region rolldown:runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
		key = keys[i];
		if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
			get: ((k) => from[k]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));

const __remix_run_react = __toESM(require("@remix-run/react"));
const react = __toESM(require("react"));

//#region entry.jsx
const x = /* @__PURE__ */ (0, react.createElement)(__remix_run_react.Link, {
	...y,
	key: z
});

```
