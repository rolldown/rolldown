---
source: crates/rolldown_testing/src/integration_test.rs
---
# Assets

## element.js

```js

//#region element.tsx
let Foo = function(Foo$1) {
	Foo$1["Div"] = "div";
	return Foo$1;
}({});
console.log(React.createElement(Foo.Div, null));

//#endregion
export { Foo };
```
## fragment.js

```js

//#region fragment.tsx
let React = function(React$1) {
	React$1["Fragment"] = "div";
	return React$1;
}({});
console.log(React.createElement(React.Fragment, null, "test"));

//#endregion
export { React };
```
## nested-element.js

```js

//#region nested-element.tsx
let x;
(function(_x) {
	let y;
	(function(_y) {
		let Foo = function(Foo$1) {
			Foo$1["Div"] = "div";
			return Foo$1;
		}({});
		_y.Foo = Foo;
	})(y || (y = _x.y || (_x.y = {})));
})(x || (x = {}));
(function(_x2) {
	let y;
	(function(_y2) {
		console.log(React.createElement(x.y.Foo.Div, null));
	})(y || (y = _x2.y || (_x2.y = {})));
})(x || (x = {}));

//#endregion
```
## nested-fragment.js

```js

//#region nested-fragment.tsx
let x;
(function(_x) {
	let y;
	(function(_y) {
		let React$1 = function(React$2) {
			React$2["Fragment"] = "div";
			return React$2;
		}({});
		_y.React = React$1;
	})(y || (y = _x.y || (_x.y = {})));
})(x || (x = {}));
(function(_x2) {
	let y;
	(function(_y2) {
		console.log(React.createElement(React.Fragment, null, "test"));
	})(y || (y = _x2.y || (_x2.y = {})));
})(x || (x = {}));

//#endregion
```
