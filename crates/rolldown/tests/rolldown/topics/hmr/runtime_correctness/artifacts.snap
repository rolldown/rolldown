---
source: crates/rolldown_testing/src/integration_test.rs
---
# Assets

## main.js

```js
import assert from "node:assert";

// HIDDEN [rolldown:runtime]
// HIDDEN [rolldown:hmr]
//#region cases/require/cjs-lib.js
var require_cjs_lib = /* @__PURE__ */ __commonJS({ "cases/require/cjs-lib.js": ((exports, module) => {
	const cjs_lib_hot = __rolldown_runtime__.createModuleHotContext("cases/require/cjs-lib.js");
	__rolldown_runtime__.registerModule("cases/require/cjs-lib.js", module);
	module.exports.foo = "foo";
}) });

//#endregion
//#region cases/require/index.js
var require_exports = {};
const require_hot = __rolldown_runtime__.createModuleHotContext("cases/require/index.js");
__rolldown_runtime__.registerModule("cases/require/index.js", { exports: require_exports });
const requiredCjsLib = require_cjs_lib();
assert.strictEqual(requiredCjsLib.foo, "foo");

//#endregion
//#region main.js
var main_exports = {};
const main_hot = __rolldown_runtime__.createModuleHotContext("main.js");
__rolldown_runtime__.registerModule("main.js", { exports: main_exports });
if (main_hot) {
	main_hot.accept();
}

//#endregion
```
# HMR Step 0

## Code

```js
//#region cases/require/cjs-lib.js
var require_cjs_lib_0 = __rolldown_runtime__.createCjsInitializer((function(exports, module) {
	try {
		__rolldown_runtime__.registerModule("cases/require/cjs-lib.js", module);
		const hot_cjs_lib = __rolldown_runtime__.createModuleHotContext("cases/require/cjs-lib.js");
		module.exports.foo = "foo";
	} finally {}
}));

//#endregion
//#region cases/require/index.js
import * as import_node_assert_0 from "node:assert";
var init_require_1 = __rolldown_runtime__.createEsmInitializer((function() {
	try {
		var __rolldown_exports__ = {};
		__rolldown_runtime__.__export(__rolldown_exports__, {});
		__rolldown_runtime__.registerModule("cases/require/index.js", { exports: __rolldown_exports__ });
		const hot_require = __rolldown_runtime__.createModuleHotContext("cases/require/index.js");
		const requiredCjsLib = (require_cjs_lib_0(), __rolldown_runtime__.loadExports("cases/require/cjs-lib.js"));
		import_node_assert_0.default.strictEqual(requiredCjsLib.foo, "foo");
	} finally {}
}));

//#endregion
//#region main.js
var init_main_2 = __rolldown_runtime__.createEsmInitializer((function() {
	try {
		var __rolldown_exports__ = {};
		__rolldown_runtime__.__export(__rolldown_exports__, {});
		__rolldown_runtime__.registerModule("main.js", { exports: __rolldown_exports__ });
		init_require_1();
		const hot_main = __rolldown_runtime__.createModuleHotContext("main.js");
		var import_require_0 = __rolldown_runtime__.loadExports("cases/require/index.js");
		if (hot_main) {
			hot_main.accept();
		}
	} finally {}
}));

//#endregion
//#region rolldown:hmr
var init_rolldown_hmr_3 = __rolldown_runtime__.createEsmInitializer((function() {
	try {
		var __rolldown_exports__ = {};
		__rolldown_runtime__.__export(__rolldown_exports__, { DevRuntime: () => DevRuntime });
		__rolldown_runtime__.registerModule("rolldown:hmr", { exports: __rolldown_exports__ });
		init_rolldown_runtime_4();
		const hot_rolldown_hmr = __rolldown_runtime__.createModuleHotContext("rolldown:hmr");
		var import_rolldown_runtime_0 = __rolldown_runtime__.loadExports("rolldown:runtime");
		class Module {
			/**
			* @type {any}
			*/
			exports = null;
			/**
			* @type {string}
			*/
			id;
			/**
			* @param {string} id
			*/
			constructor(id) {
				this.id = id;
			}
		}
		class DevRuntime {
			/**
			* @type {Record<string, Module>}
			*/
			modules = {};
			/**
			* @param {string} _moduleId
			*/
			createModuleHotContext(_moduleId) {
				throw new Error("createModuleHotContext should be implemented");
			}
			/**
			* @param {string[]} _boundaries
			*/
			applyUpdates(_boundaries) {
				throw new Error("applyUpdates should be implemented");
			}
			/**
			* @param {string} id
			* @param {{ exports: any }} meta
			*/
			registerModule(id, meta) {
				const module = new Module(id);
				module.exports = meta.exports;
				this.modules[id] = module;
			}
			/**
			* @param {string} id
			*/
			loadExports(id) {
				const module = this.modules[id];
				if (module) {
					return module.exports;
				} else {
					console.warn(`Module ${id} not found`);
					return {};
				}
			}
			/**
			* __esmMin
			*
			* @type {<T>(fn: any, res: T) => () => T}
			* @internal
			*/
			createEsmInitializer = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
			/**
			* __commonJSMin
			*
			* @type {<T extends { exports: any }>(cb: any, mod: { exports: any }) => () => T}
			* @internal
			*/
			createCjsInitializer = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
			/** @internal */
			__toESM = import_rolldown_runtime_0.__toESM;
			/** @internal */
			__toCommonJS = import_rolldown_runtime_0.__toCommonJS;
			/** @internal */
			__export = import_rolldown_runtime_0.__export;
			/** @internal */
			__toDynamicImportESM = import_rolldown_runtime_0.__toDynamicImportESM;
			/** @internal */
			__reExport = import_rolldown_runtime_0.__reExport;
		}
		class TestDevRuntime extends DevRuntime {
			/**
			* @override
			* @param {string} _moduleId
			*/
			createModuleHotContext(_moduleId) {
				return { accept() {} };
			}
			/**
			* @override
			* @param {string[]} _boundaries
			*/
			applyUpdates(_boundaries) {}
		}
		globalThis.__rolldown_runtime__ ??= new TestDevRuntime();
		/** @type {string[]} */
		const testPatches = globalThis.__testPatches;
		if (testPatches) {
			setTimeout(async () => {
				for (const patchChunk of testPatches) {
					await import(patchChunk);
				}
			}, 0);
		}
	} finally {}
}));

//#endregion
//#region rolldown:runtime
var init_rolldown_runtime_4 = __rolldown_runtime__.createEsmInitializer((function() {
	try {
		var __rolldown_exports__ = {};
		__rolldown_runtime__.__export(__rolldown_exports__, {});
		__rolldown_runtime__.registerModule("rolldown:runtime", { exports: __rolldown_exports__ });
		const hot_rolldown_runtime = __rolldown_runtime__.createModuleHotContext("rolldown:runtime");
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __commonJS = (cb, mod) => function() {
			return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
		};
		var __export = (target, all) => {
			for (var name in all) __defProp(target, name, {
				get: all[name],
				enumerable: true
			});
		};
		var __copyProps = (to, from, except, desc) => {
			if (from && typeof from === "object" || typeof from === "function") for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
				key = keys[i];
				if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
					get: ((k) => from[k]).bind(null, key),
					enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
				});
			}
			return to;
		};
		var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
			value: mod,
			enumerable: true
		}) : target, mod));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var __toDynamicImportESM = (isNodeMode) => (mod) => __toESM(mod.default, isNodeMode);
	} finally {}
}));

//#endregion
init_main_2()
__rolldown_runtime__.applyUpdates(['main.js']);
```
## Meta

- update type: patch
### Hmr Boundaries

- boundary: main.js, accepted_via: main.js
