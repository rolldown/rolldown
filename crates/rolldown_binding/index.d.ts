/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface PluginOptions {
  name: string
  buildStart?: () => Promise<void>
  resolveId?: (
    specifier: string,
    importer?: string,
    options?: HookResolveIdArgsOptions,
  ) => Promise<undefined | ResolveIdResult>
  load?: (id: string) => Promise<undefined | SourceResult>
  transform?: (id: string, code: string) => Promise<undefined | SourceResult>
  buildEnd?: (error: string) => Promise<void>
}
export interface HookResolveIdArgsOptions {
  isEntry: boolean
  kind: string
}
export interface ResolveIdResult {
  id: string
  external?: boolean
}
export interface SourceResult {
  code: string
}
export interface InputItem {
  name?: string
  import: string
}
export interface InputOptions {
  input: Array<InputItem>
  plugins: Array<PluginOptions>
  cwd: string
}
export interface OutputOptions {
  entryFileNames?: string
  chunkFileNames?: string
  dir?: string
  exports?: 'default' | 'named' | 'none' | 'auto'
  format?: 'esm' | 'cjs'
}
export interface RenderedModule {
  code?: string
  removedExports: Array<string>
  renderedExports: Array<string>
  originalLength: number
  renderedLength: number
}
export interface OutputChunk {
  code: string
  fileName: string
  isEntry: boolean
  facadeModuleId?: string
  modules: Record<string, RenderedModule>
  exports: Array<string>
}
export interface OutputAsset {
  fileName: string
  source: string
}
export interface Outputs {
  chunks: Array<OutputChunk>
  assets: Array<OutputAsset>
}
export class Bundler {
  constructor(inputOpts: InputOptions)
  write(opts: OutputOptions): Promise<Outputs>
  generate(opts: OutputOptions): Promise<Outputs>
}
