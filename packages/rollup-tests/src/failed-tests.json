[
  "rollup@function@add-watch-file-generate: throws when adding watch files during generate",
  "rollup@function@adds-json-hint-for-missing-export-if-is-json-file: should provide json hint when importing a no export json file",
  "rollup@function@adds-timings-to-bundle-when-codesplitting: Adds timing information to bundle when bundling with perf=true",
  "rollup@function@adds-timings-to-bundle: Adds timing information to bundle when bundling with perf=true",
  "rollup@function@already-deshadowed-import: handle already module import names correctly if they are have already been deshadowed",
  "rollup@function@argument-deoptimization@global-calls: tracks argument mutations of calls to globals",
  "rollup@function@assign-namespace-to-var: allows a namespace to be assigned to a variable",
  "rollup@function@banner-and-footer: adds a banner/footer",
  "rollup@function@can-import-self-treeshake: direct self import",
  "rollup@function@can-import-self: a module importing its own bindings",
  "rollup@function@cannot-call-external-namespace: warns if code calls an external namespace",
  "rollup@function@cannot-call-internal-namespace: warns if code calls an internal namespace",
  "rollup@function@cannot-resolve-sourcemap-warning: handles when a sourcemap cannot be resolved in a warning",
  "rollup@function@catch-dynamic-import-failure: allows catching failed dynamic imports",
  "rollup@function@check-exports-exportedBindings-as-a-supplementary-test: check exports and exportedBindings in moduleParsed as a supplementary test",
  "rollup@function@check-resolve-for-entry: checks that entry is resolved",
  "rollup@function@chunking-duplicate-reexport: handles duplicate reexports when using dynamic imports",
  "rollup@function@circular-missed-reexports-2: handles circular reexports",
  "rollup@function@circular-missed-reexports: handles circular reexports",
  "rollup@function@circular-reexport: throws proper error for circular reexports",
  "rollup@function@class-name-conflict-2: does not shadow variables when preserving class names",
  "rollup@function@class-name-conflict-3: does not shadow variables when preserving class names",
  "rollup@function@class-name-conflict-4: does not shadow variables when preserving class names",
  "rollup@function@class-name-conflict: preserves class names even if the class is renamed",
  "rollup@function@compact: compact output with compact: true",
  "rollup@function@configure-relative-external-module: allows a nonexistent relative module to be configured as external",
  "rollup@function@conflicting-reexports@named-import-external: warns when a conflicting binding is imported via a named import from external namespaces",
  "rollup@function@conflicting-reexports@named-import: throws when a conflicting binding is imported via a named import",
  "rollup@function@conflicting-reexports@namespace-import: warns when a conflicting binding is imported via a namespace import",
  "rollup@function@context-resolve: returns the correct results for the context resolve helper",
  "rollup@function@custom-external-module-options: supports adding custom options to external modules",
  "rollup@function@custom-module-options: supports adding custom options to modules",
  "rollup@function@custom-path-resolver-async: uses a custom path resolver (asynchronous)",
  "rollup@function@custom-path-resolver-plural-b: resolver error is not caught",
  "rollup@function@custom-path-resolver-sync: uses a custom path resolver (synchronous)",
  "rollup@function@cycles-default-anonymous-function-hoisted: Anonymous function declarations are hoisted",
  "rollup@function@cycles-defaults: cycles work with default exports",
  "rollup@function@cycles-export-star: does not stack overflow on `export * from X` cycles",
  "rollup@function@cycles-immediate: handles cycles where imports are immediately used",
  "rollup@function@cycles-pathological-2: resolves even more pathological cyclical dependencies gracefully",
  "rollup@function@cycles-stack-overflow: does not stack overflow on crazy cyclical dependencies",
  "rollup@function@deconflict-synthetic-named-export-cross-chunk: deconflicts synthetic named exports across chunks",
  "rollup@function@deconflict-synthetic-named-export: deconflicts synthetic named exports",
  "rollup@function@deconflicts-interop: deconflicts the interop function",
  "rollup@function@default-export-with-null-prototype: default exports of objects with null prototypes are supported",
  "rollup@function@default-not-reexported: default export is not re-exported with export *",
  "rollup@function@deprecations@externalImportAssertions: marks the \"output.externalImportAssertions\" option as deprecated",
  "rollup@function@deshadow-respect-existing: respect existing variable names when deshadowing",
  "rollup@function@does-not-hang-on-missing-module: does not hang on missing module (#53)",
  "rollup@function@double-default-export: throws on double default exports",
  "rollup@function@double-named-export: throws on duplicate named exports",
  "rollup@function@double-named-reexport: throws on duplicate named exports",
  "rollup@function@double-namespace-reexport: handles chained namespace reexports from externals",
  "rollup@function@duplicate-import-fails: disallows duplicate imports",
  "rollup@function@duplicate-import-specifier-fails: disallows duplicate import specifiers",
  "rollup@function@duplicate-input-entry: handles duplicate entry modules when using the object form",
  "rollup@function@dynamic-import-default-mode-facade: handles dynamic imports from facades using default export mode",
  "rollup@function@dynamic-import-expression: Dynamic import expression replacement",
  "rollup@function@dynamic-import-not-found: warns if a dynamic import is not found",
  "rollup@function@dynamic-import-only-default: correctly imports dynamic namespaces with only a default export from entry- and non-entry-point chunks",
  "rollup@function@dynamic-import-relative-not-found: throws if a dynamic relative import is not found",
  "rollup@function@dynamic-import-this-arrow: uses correct \"this\" in dynamic imports when using arrow functions",
  "rollup@function@dynamic-import-this-function: uses correct \"this\" in dynamic imports when not using arrow functions",
  "rollup@function@dynamic-imports-shared-exports: allows sharing imports between dynamic chunks",
  "rollup@function@emit-file@chunk-filename-not-available-buildEnd: Throws when accessing the filename before it has been generated in buildEnd",
  "rollup@function@emit-file@chunk-filename-not-available-renderStart: Throws when accessing the filename before it has been generated in renderStart",
  "rollup@function@emit-file@chunk-filename-not-available: Throws when accessing the filename before it has been generated",
  "rollup@function@emit-file@chunk-not-found: Throws if an emitted entry chunk cannot be resolved",
  "rollup@function@emit-file@emit-from-output-options: throws when trying to emit files from the outputOptions hook",
  "rollup@function@emit-file@emit-same-file: warns if multiple files with the same name are emitted",
  "rollup@function@emit-file@file-references-in-bundle: lists referenced files in the bundle",
  "rollup@function@emit-file@invalid-asset-name3: throws for invalid asset names with absolute path on Windows OS",
  "rollup@function@emit-file@invalid-asset-name: throws for invalid asset names",
  "rollup@function@emit-file@invalid-chunk-id: throws for invalid chunk ids",
  "rollup@function@emit-file@invalid-file-type: throws for invalid file types",
  "rollup@function@emit-file@invalid-prebuilt-chunk-filename: throws for invalid prebuilt chunks filename",
  "rollup@function@emit-file@invalid-prebuit-chunk-code: throws for invalid prebuilt chunks code",
  "rollup@function@emit-file@invalid-reference-id: throws for invalid reference ids",
  "rollup@function@emit-file@invalid-set-asset-source-id: throws for invalid asset ids",
  "rollup@function@emit-file@modules-loaded: Throws when adding a chunk after the modules have finished loading",
  "rollup@function@emit-file@no-input: It is not necessary to provide an input if a dynamic entry is emitted",
  "rollup@function@emit-file@prebuilt-chunk: get right prebuilt chunks",
  "rollup@function@emit-file@set-asset-source-chunk: throws when trying to set the asset source of a chunk",
  "rollup@function@emit-file@set-asset-source-transform: throws when setting the asset source in the transform hook",
  "rollup@function@emit-file@set-source-in-output-options: throws when trying to set file sources in  the outputOptions hook",
  "rollup@function@enforce-sequential-plugin-order: allows to enforce sequential plugin hook order for parallel plugin hooks",
  "rollup@function@error-after-transform-should-throw-correct-location: error after transform should throw with correct location of file",
  "rollup@function@error-missing-umd-name: throws an error if no name is provided for a UMD bundle",
  "rollup@function@error-parse-json: throws with an extended error message when failing to parse a file with \".json\" extension",
  "rollup@function@error-parse-unknown-extension: throws with an extended error message when failing to parse a file without .(m)js extension",
  "rollup@function@escape-arguments: does not use \"arguments\" as a placeholder variable for a default export",
  "rollup@function@export-not-at-top-level-fails: disallows non-top-level exports",
  "rollup@function@export-type-mismatch-c: cannot have named exports if explicit export type is default",
  "rollup@function@export-type-mismatch: cannot have named exports if explicit export type is default",
  "rollup@function@external-alias-parent: includes an external module included dynamically by an alias",
  "rollup@function@external-alias: includes an external module included dynamically by an alias",
  "rollup@function@external-conflict: external paths from custom resolver remain external (#633)",
  "rollup@function@external-directory-import: handles using ../ as external import (#4349)",
  "rollup@function@external-dynamic-import-live-binding-compact: supports external dynamic imports with live bindings in compact mode",
  "rollup@function@external-dynamic-import-live-binding: supports external dynamic imports with live bindings",
  "rollup@function@external-entry-point-object: throws for entry points that are resolved as an external object by plugins",
  "rollup@function@external-entry-point: throws for entry points that are resolved as false by plugins",
  "rollup@function@external-function-always-true: Does not call external for entry point",
  "rollup@function@external-ids-not-resolved: does not attempt to resolve external IDs",
  "rollup@function@external-live-binding-compact: handles external live-bindings",
  "rollup@function@external-live-binding: handles external live-bindings",
  "rollup@function@external-normalization: external paths from custom resolver remain external (#633)",
  "rollup@function@external-resolve-false: includes an external module with a false resolve return",
  "rollup@function@external-resolved: passes both unresolved and resolved ids to the external option",
  "rollup@function@facade-reexports: handles reexports when creating a facade chunk and transitive dependencies are not hoisted",
  "rollup@function@file-and-dir: throws when using both the file and the dir option",
  "rollup@function@function-use-strict-directive-removed: should delete use strict from function body",
  "rollup@function@handle-missing-export-source: does not fail if a pre-generated AST is omitting the source property of an unused named export (#3210)",
  "rollup@function@handles-stringified-sourcemaps: handles transforms that return stringified source maps (#377)",
  "rollup@function@has-default-export: reports if a module has a default export",
  "rollup@function@has-modules-array: user-facing bundle has modules array",
  "rollup@function@hashing@length-at-non-hash: throws when configuring a length for placeholder other than \"hash\"",
  "rollup@function@hashing@maximum-hash-size: throws when the maximum hash size is exceeded",
  "rollup@function@hashing@minimum-hash-size: throws when the maximum hash size is exceeded",
  "rollup@function@hoisted-variable-if-else: handles hoisted variables in chained if statements",
  "rollup@function@iife-code-splitting: throws when generating multiple chunks for an IIFE build",
  "rollup@function@implicit-dependencies@dependant-dynamic-import-no-effects: throws when a module that is loaded before an emitted chunk is fully tree-shaken",
  "rollup@function@implicit-dependencies@dependant-dynamic-import-not-included: throws when a module that is loaded before an emitted chunk is only linked to the module graph via a tree-shaken dynamic import",
  "rollup@function@implicit-dependencies@dependant-not-part-of-graph: throws when a module that is loaded before an emitted chunk is not part of the module graph",
  "rollup@function@implicit-dependencies@external-dependant: throws when a module that is loaded before an emitted chunk does not exist",
  "rollup@function@implicit-dependencies@missing-dependant: throws when a module that is loaded before an emitted chunk is external",
  "rollup@function@import-meta-url-b: Access document.currentScript at the top level",
  "rollup@function@import-meta-url: resolves import.meta.url",
  "rollup@function@import-not-at-top-level-fails: disallows non-top-level imports",
  "rollup@function@import-of-unexported-fails: marking an imported, but unexported, identifier should throw",
  "rollup@function@inline-dynamic-imports-bundle: ignores non-bundled modules when inlining dynamic imports",
  "rollup@function@inline-dynamic-no-treeshake: handles inlining dynamic imports when treeshaking is disabled for modules (#4098)",
  "rollup@function@inline-imports-with-multiple-array: Having multiple inputs in an array is not supported when inlining dynamic imports",
  "rollup@function@inline-imports-with-multiple-object: Having multiple inputs in an object is not supported when inlining dynamic imports",
  "rollup@function@inlined-dynamic-namespace-compact: properly resolves inlined dynamic namespaces in compact mode",
  "rollup@function@internal-reexports-from-external: supports namespaces with external star reexports",
  "rollup@function@keep-cjs-dynamic-import: keeps dynamic imports in CJS output by default",
  "rollup@function@load-module-error@load: throws when a module cannot be loaded",
  "rollup@function@load-resolve-dependencies: allows to wait for dependency resolution in this.load to scan dependency trees",
  "rollup@function@load-returns-string-or-null: throws error if load returns something wacky",
  "rollup@function@logging@handle-logs-in-plugins: allows plugins to read and filter logs",
  "rollup@function@logging@log-from-options: can log from the options hook",
  "rollup@function@logging@plugin-order: allows to order plugins when logging",
  "rollup@function@logging@promote-log-to-error: allows turning logs into errors",
  "rollup@function@member-expression-assignment-in-function: detect side effect in member expression assignment when not top level",
  "rollup@function@mixed-external-paths: allows using the path option selectively",
  "rollup@function@modify-meta: allows to freely modify moduleInfo.meta and maintain object identity",
  "rollup@function@module-level-directive: module level directives should produce warnings",
  "rollup@function@module-parsed-hook: calls the moduleParsedHook once a module is parsed",
  "rollup@function@module-parsed-imported-ids: provides full importedIds and dynamicallyImportedIds in the moduleParsed hook",
  "rollup@function@module-side-effect-reexport: includes side effects of re-exporters unless they have moduleSideEffects: false",
  "rollup@function@module-side-effects@array: supports setting module side effects via an array",
  "rollup@function@module-side-effects@external-false: supports setting module side effects to false for external modules",
  "rollup@function@module-side-effects@load: handles setting moduleSideEffects in the load hook",
  "rollup@function@module-side-effects@resolve-id-external: does not include modules without used exports if moduleSideEffect is false",
  "rollup@function@module-side-effects@resolve-id: does not include modules without used exports if moduleSideEffect is false",
  "rollup@function@module-side-effects@transform: handles setting moduleSideEffects in the transform hook",
  "rollup@function@module-side-effects@writable: ModuleInfo.moduleSideEffects should be writable during build time",
  "rollup@function@transform-without-sourcemap-render-chunk: preserves sourcemap chains when transforming",
  "rollup@sourcemaps@basic-support: basic sourcemap support@generates es",
  "rollup@sourcemaps@names: names are recovered (https://github.com/rollup/rollup/issues/101)@generates es",
  "rollup@sourcemaps@single-length-segments: handles single-length sourcemap segments@generates es",
  "rollup@sourcemaps@transform-low-resolution: handles combining low-resolution and high-resolution source-maps when transforming@generates es"
]