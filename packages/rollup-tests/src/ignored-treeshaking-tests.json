[
  "rollup@form@argument-deoptimization@no-default-deoptimization: does not deoptimize call arguments by default",
  "rollup@form@argument-deoptimization@no-global-call-deoptimization: does not deoptimize call arguments of calls to globals by default",
  "rollup@form@argument-deoptimization@return-function-deoptimization: does not deoptimize call arguments of returned functions by default",
  "rollup@form@array-element-tracking@array-elements: tracks elements of arrays",
  "rollup@form@array-element-tracking@array-mutation: tracks mutations of array elements",
  "rollup@form@array-element-tracking@array-spread: tracks elements of arrays with spread elements",
  "rollup@form@array-element-tracking@spread-element-deoptimization: deoptimizes array spread elements",
  "rollup@form@arrow-function-call-parameters: take actual parameters into account when determining side-effects of calls to arrow functions",
  "rollup@form@arrow-function-return-values: forwards return values of arrow functions",
  "rollup@form@async-function-effects: tracks effects when awaiting thenables",
  "rollup@form@async-function-unused: treeshakes async functions (#492)",
  "rollup@form@avoid-unnecessary-conditional-deopt: avoids unnecessary deoptimizations of conditional expressions",
  "rollup@form@binary-expressions: handles binary expression side-effects",
  "rollup@form@break-control-flow@break-statement-labels: supports labels when breaking control flow",
  "rollup@form@break-control-flow@break-statement-labels-in-loops: handles breaking to loops inside labeled statements",
  "rollup@form@break-control-flow@break-statement-labels-switch: supports labels when breaking control flow from a switch statement",
  "rollup@form@break-control-flow@break-statement-loops: breaks control flow when a break statement is encountered inside a loop",
  "rollup@form@break-control-flow@caught-errors: breaks control flow when an error is thrown inside a catch block",
  "rollup@form@break-control-flow@hoisted-declarations: includes hoisted declarations when control flow is broken",
  "rollup@form@break-control-flow@if-statement-breaks: handles conditionally broken execution",
  "rollup@form@break-control-flow@if-statement-errors: handles conditionally thrown errors",
  "rollup@form@break-control-flow@loop-errors: does not break flow from inside loops that may not have executed",
  "rollup@form@break-control-flow@return-statements: breaks control flow when a return statement is encountered",
  "rollup@form@break-control-flow@switch-errors: handles errors in switch statements",
  "rollup@form@break-control-flow@thrown-errors: breaks control flow when an error is thrown",
  "rollup@form@builtin-prototypes@array-expression: Tree-shake known array prototype functions",
  "rollup@form@builtin-prototypes@check-tree-shake-on-regexp-if-it-is-used: check tree-shake on RegExp if it is used",
  "rollup@form@builtin-prototypes@literal: Tree-shake known literal prototype functions",
  "rollup@form@builtin-prototypes@object-expression: Tree-shake known object prototype functions",
  "rollup@form@builtin-prototypes@side-effect-free-array-expression: Tree-shakes side-effect-free array functions if only their return value is unused",
  "rollup@form@builtin-prototypes@template-literal: Tree-shake known string template literal prototype functions",
  "rollup@form@chained-assignments: treeshakes chained assignments",
  "rollup@form@class-constructor-side-effect: preserves side-effects in a class constructor (#1233)",
  "rollup@form@class-fields: supports class fields",
  "rollup@form@class-method-access: tracks side-effects when accessing class methods",
  "rollup@form@class-static-initialization-block: supports class static initialization blocks",
  "rollup@form@class-without-new: instantiating a class without \"new\" is a side-effect",
  "rollup@form@comment-start-inside-comment: properly remove coments above import statements@generates es",
  "rollup@form@computed-member-expression-assignments: detect side-effects in assignments involving computed members",
  "rollup@form@conditional-expression: only retain branches with side-effects",
  "rollup@form@conditional-expression-deopzimize-while-included: handles deoptimizations of logical expression while they are inlcuded (#3324)",
  "rollup@form@conditional-expression-paths: only retain branches with side-effects",
  "rollup@form@declarations-with-side-effects: retains side-effects in declarations will tree-shaking the declared variable",
  "rollup@form@deconflict-nested-tree-shaking: does not consider nested tree-shaken variables when deconflicting",
  "rollup@form@deconflict-tree-shaken: does not consider tree-shaken variables when deconflicting",
  "rollup@form@deconflict-tree-shaken-globals: does not deconflict due to tree-shaken global variables",
  "rollup@form@deopt-regexp-type: deoptimizes typeof for regular expressions to better support es6-sim",
  "rollup@form@deopt-string-concatenation: deoptimize concatenation when used as an expression statement to better support es5-shim",
  "rollup@form@deoptimize-superclass: does not deoptimize the entire superclass when reassigning a property",
  "rollup@form@deoptimize-var-in-hoisted-scopes: deoptimizes var variables in hoisted scopes",
  "rollup@form@dynamic-resolvable-if-statements: allows using variables to resolve conditionals",
  "rollup@form@emit-file-tree-shaken-access: does not include format globals when tree-shaking an asset access@generates es",
  "rollup@form@empty-block-statement: removes an empty block statement@generates es",
  "rollup@form@empty-do-while-statement: removes an empty do-while statement@generates es",
  "rollup@form@empty-for-in-statement: removes an empty for-in statement",
  "rollup@form@empty-for-statement: removes an empty for statement@generates es",
  "rollup@form@empty-if-statement: removes an empty if statement",
  "rollup@form@empty-statement: removes an empty statement@generates es",
  "rollup@form@empty-switch-statement: removes an empty switch statement",
  "rollup@form@empty-try-catch-statement: removes an empty try-catch-finally statement@generates es",
  "rollup@form@empty-while-statement: removes an empty while statement@generates es",
  "rollup@form@entry-with-unused-synthetic-exports: does not include unused synthetic namespace object in entry points@generates es",
  "rollup@form@exclude-unnecessary-modifications: statements that modify definitions within unused functions are excluded@generates es",
  "rollup@form@function-call-parameters: take actual parameters into account when determining side-effects of calls to functions",
  "rollup@form@function-iterable-prototype: Removes unused functions where the prototype is iterable",
  "rollup@form@globals-removes-access-to-pure-function-members: accessing members of pure functions and their prototypes is not a side-effect@generates es",
  "rollup@form@hoisted-unused-conditional: Properly renders conditionals in hoisted variables in dead branches",
  "rollup@form@hoisted-variable-if-stmt: Properly renders branches which refer to hoisted variables from other lexical scopes",
  "rollup@form@ignore-property-access-side-effects: ignore side-effects when accessing properties if treeshake.propertyReadSideEffects is false",
  "rollup@form@ignore-unknown-global-side-effects: ignore side-effects when accessing unknown globals if treeshake.unknownGlobalSideEffects is false",
  "rollup@form@inlined-treeshaken-dynamic-import: completely removes tree-shaken dynamic imports @generates es",
  "rollup@form@keep-property-access-side-effects: keep side-effects when accessing properties if treeshake.propertyReadSideEffects is true",
  "rollup@form@keep-tree-shaking-comments-no-asi: always keep leading comments when tree-shaking and no automatic semicolons are inserted",
  "rollup@form@known-globals: does not consider it a side-effect if a known global variable is accessed",
  "rollup@form@lazy-assignment-deoptimization: only deoptimizes assigned variables when the assignment is included",
  "rollup@form@literals-from-return-expressions: tracks literal values across return expressions",
  "rollup@form@log-side-effects: logs side effects",
  "rollup@form@logical-expression@deopzimize-while-included: handles deoptimizations of logical expression while they are inlcuded (#3324)",
  "rollup@form@manual-pure-functions: allows to manually declare functions as pure by name",
  "rollup@form@minimal-this-mutation: mutates \"this\" only if necessary on function calls",
  "rollup@form@modify-class-prototype: tree-shakes prototype modifications of classes",
  "rollup@form@module-no-treeshake: allows disabling tree-shaking for modules",
  "rollup@form@multi-expression-calls: handles side-effect-free multi-expressions",
  "rollup@form@nested-deoptimization: handles deoptimization of nested properties",
  "rollup@form@nested-member-access: throw an error when accessing members of null or undefined",
  "rollup@form@nested-tree-shaking: removes unused nested statements",
  "rollup@form@new-target-meta-property: supports the new.target meta property@generates es",
  "rollup@form@no-side-effects-function-declaration: __NO_SIDE_EFFECTS__ annotations for function declarations",
  "rollup@form@no-side-effects-function-declaration-preserve: preserve __NO_SIDE_EFFECTS__ annotations for function declarations",
  "rollup@form@no-treeshake: all code should be included if tree-shaking is disabled",
  "rollup@form@no-treeshake-conflict: does not introduce conflicting variables with treeshake: false@generates es",
  "rollup@form@no-treeshake-default-export-conflict: properly deconflicts default exports when not tree-shaking",
  "rollup@form@no-treeshake-include-labels: always includes labels when tree-shaking is turned off (#3473)",
  "rollup@form@no-treeshake-namespace-object: generates namespace objects when not tree-shaking",
  "rollup@form@nullish-coalescing: supports tree-shaking with nullish-coalescing",
  "rollup@form@object-define-property: allows globals to have parameter mutation side effects",
  "rollup@form@object-expression@computed-properties: Associates non-string keys with string keys",
  "rollup@form@object-expression@method-side-effects: Track side-effects of method calls",
  "rollup@form@object-expression@nested-literal-assignment-without-access-side-effect: treats mutating nested properties as side effects",
  "rollup@form@object-expression@nested-literal-value-without-access-side-effect: uses an unknown value for nested properties",
  "rollup@form@object-expression@reassign-prop-without-proto: correctly deoptimizes when there is no proto",
  "rollup@form@object-expression@return-expressions: Track side-effects of method return values",
  "rollup@form@object-expression@unknown-getter-no-side-effect: removes unknown getter access without side effect",
  "rollup@form@object-expression@unknown-setter-no-side-effect: removes unknown setter access without side effect",
  "rollup@form@object-expression@unknown-setter-no-side-effect2: removes unknown setter access without side effect",
  "rollup@form@object-freeze-effects: Only treats Object.freeze as a side effect if the argument is used",
  "rollup@form@object-literal-property-overwrites: detect side-effects in overwritten properties of object literals",
  "rollup@form@optional-chaining-namespace: supports optional chaining with namespace objects",
  "rollup@form@pattern-assignments: Make sure side-effects are passed along destructuring assignments@generates es",
  "rollup@form@property-setters-and-getters@access-when-called-effect: respects access side-effects when calling a getter",
  "rollup@form@proto-null: handles getters and setters on __proto__ properties",
  "rollup@form@prune-pure-unused-import: prunes pure unused external imports ([#1352])@generates es",
  "rollup@form@prune-pure-unused-import-array: prunes pure unused external imports ([#1352])@generates es",
  "rollup@form@prune-pure-unused-import-function: prunes pure unused external imports ([#1352])@generates es",
  "rollup@form@pure-comment-line-break: adjust line-break handling when dealing with pure annotations",
  "rollup@form@pure-comment-scenarios-simple: correctly handles various pure comment scenarios",
  "rollup@form@recursive-calls: do not fail for recursive calls",
  "rollup@form@recursive-this-deoptimization: handles recursive \"this\" deoptimizations (#4089)",
  "rollup@form@remove-no-side-effects-variable: removes __NO_SIDE_EFFECTS__ annotation if the variable declaration is only removed partially",
  "rollup@form@remove-tree-shaken-pure-comments: removes pure comments of tree-shaken nodes",
  "rollup@form@remove-treeshaken-banners: Also remove banner comments when completely tree-shaking files",
  "rollup@form@removes-unused-babel-helpers: Removes unused babel helpers from the build (#1595)",
  "rollup@form@render-removed-declarations: renders tree-shaken variable declarations",
  "rollup@form@resolution-order: does not depend on the resolution order of modules for tree-shaking (#2753)",
  "rollup@form@return-after-error: tree-shakes entities referenced in a return statement after an error",
  "rollup@form@return-value-access-in-conditional: handles accessing funciton return values in deoptimized conditionals",
  "rollup@form@self-calling-function: discards a self-calling function without side-effects@generates es",
  "rollup@form@self-calling-function-with-effects: discards a self-calling function with side-effects@generates es",
  "rollup@form@self-deoptimization: handles situations where a member expression is deoptimized while being deoptimized",
  "rollup@form@sequence-expression: only retain expressions with effects in sequence expressions (#1649)",
  "rollup@form@side-effect: side-effects to non-globals are not blindly included@generates es",
  "rollup@form@side-effect-b: discards IIFE with no side-effects@generates es",
  "rollup@form@side-effect-c: discards function with no side-effects@generates es",
  "rollup@form@side-effect-d: excludes functions that are known to be pure@generates es",
  "rollup@form@side-effect-default-reexport: Observes side-effects in side-effect-free modules that contain a used default export that just reexports from another module",
  "rollup@form@side-effect-e: accounts for local scopes when tested function purity",
  "rollup@form@side-effect-es5-classes: omits ES5 classes which are pure (e.g. they only assign to `this`)",
  "rollup@form@side-effect-f: disregards side-effects that are contained within a function@generates es",
  "rollup@form@side-effect-g: excludes constructors that are known to be pure@generates es",
  "rollup@form@side-effect-h: includes throw statements@generates es",
  "rollup@form@side-effect-i: includes top-level throw statements@generates es",
  "rollup@form@side-effect-j: includes late function declarations with side-effects@generates es",
  "rollup@form@side-effect-k: use of arguments is treated as a side-effect@generates es",
  "rollup@form@side-effect-l: discards function with no side-effects in imported module@generates es",
  "rollup@form@side-effect-m: detects side-effects in circular function calls",
  "rollup@form@side-effect-n: detects side-effects in complex call expressions@generates es",
  "rollup@form@side-effect-o: detects side-effects in complex call expressions@generates es",
  "rollup@form@side-effect-p: detects mutation of globals@generates es",
  "rollup@form@side-effect-q: discards effects in conditional expressions with known test values",
  "rollup@form@side-effect-r: discards unused function expression assigned to a variable that calls itself and a global",
  "rollup@form@side-effect-s: discards unused function expression assigned to a variable that calls itself and has side effects@generates es",
  "rollup@form@side-effect-t: throw statement is a side effect@generates es",
  "rollup@form@side-effect-with-plusplus-expression: correctly drop side-effect free statements in presence of update expression (#1564)",
  "rollup@form@side-effects-await: await statements should never be dropped if a function has other side-effects (#1584)",
  "rollup@form@side-effects-break-statements: break statements should always by included but not always cause their parents to have effects@generates es",
  "rollup@form@side-effects-call-arguments: side-effects in call arguments should be included",
  "rollup@form@side-effects-class-getters-setters: treat getters and setters on classes as function calls",
  "rollup@form@side-effects-computed-pattern-keys: side-effects in with computed pattern keys should not be ignored",
  "rollup@form@side-effects-delete: delete is only a side-effect for included variables@generates es",
  "rollup@form@side-effects-es6-class-declarations: determine side effects in ES6 class declarations",
  "rollup@form@side-effects-es6-class-expressions: determine side effects in ES6 class expressions",
  "rollup@form@side-effects-es6-super-classes: determine side effects in ES6 super classes",
  "rollup@form@side-effects-expressions-as-statements: in order to keep certain getter calls, do not remove some expression statements",
  "rollup@form@side-effects-generators: Properly detect side-effects in generator functions",
  "rollup@form@side-effects-getters-and-setters: treat getters and setters as function calls",
  "rollup@form@side-effects-in-template-literals: detects side-effects in template literals and tagged template expressions",
  "rollup@form@side-effects-internal-modules: does not pass internal modules to moduleSideEffects",
  "rollup@form@side-effects-logical-expressions: only evaluate the second part of a logical expression if necessary@generates es",
  "rollup@form@side-effects-object-literal-calls: detects side-effects when mutating object literals",
  "rollup@form@side-effects-object-literal-mutation: detects side-effects when mutating object literals",
  "rollup@form@side-effects-object-literal-mutation-misc: detects side-effects when setting and/or calling properties on object literals",
  "rollup@form@side-effects-pattern-assignment: side-effects when mutating destructured variables should not be ignored",
  "rollup@form@side-effects-pattern-defaults: side-effects in pattern defaults should not be ignored@generates es",
  "rollup@form@side-effects-prototype-assignments: include side-effects with re-assigned prototypes (#953)@generates es",
  "rollup@form@side-effects-reassignment: when mutating/calling a reassigned variable, all assignments should be checked for side-effects@generates es",
  "rollup@form@side-effects-return-statements: return statements do not have side-effects but should be kept in certain cases (#1585)@generates es",
  "rollup@form@side-effects-static-methods: allow calls to pure static methods to be tree-shaken",
  "rollup@form@side-effects-switch-statements: switch statements should be correctly tree-shaken",
  "rollup@form@side-effects-this: When a constructor is called with the new keyword, changing its this has no side effects",
  "rollup@form@skips-dead-branches: skips a dead branch",
  "rollup@form@skips-dead-branches-b: skips a dead branch (b)@generates es",
  "rollup@form@skips-dead-branches-c: skips a dead branch (c)@generates es",
  "rollup@form@skips-dead-branches-d: skips a dead branch (d)@generates es",
  "rollup@form@skips-dead-branches-e: skips a dead branch (e)@generates es",
  "rollup@form@skips-dead-branches-f: skips a dead branch (f)@generates es",
  "rollup@form@skips-dead-branches-g: skips a dead conditional expression branch (g)@generates es",
  "rollup@form@skips-dead-branches-h: skips a dead branch (h)@generates es",
  "rollup@form@skips-dead-branches-i: skips a dead branch (i)@generates es",
  "rollup@form@skips-dead-branches-j: skips a dead branch (j)@generates es",
  "rollup@form@static-block-render: Correctly render treeshaked inline static blocks",
  "rollup@form@static-class-property-calls: handles effects when calling static class properties",
  "rollup@form@string-replace-side-effects: does not assume string.replace has side effects when called with a string as second argument",
  "rollup@form@super-class-no-side-effects: Does not wrongly attribute side effects when the super class of an unused class is in a file without side effects (#4808)",
  "rollup@form@super-classes@super-class-prototype-calls: correctly resolves the prototype of the super class when calling properties",
  "rollup@form@super-classes@super-class-prototype-values: correctly resolves the prototype of the super class when reading property values",
  "rollup@form@tdz-common: preserve common TDZ violations",
  "rollup@form@template-literal@computed-properties: Resolve template literals in computed property keys",
  "rollup@form@template-literal@simplify-conditionals: Template literals can be simplified when used in conditionals",
  "rollup@form@this-in-class-body: uses the correct \"this\" value in class properties",
  "rollup@form@top-level-await: top-level await support@generates es",
  "rollup@form@tree-shake-arguments-conditional: tracks tree-shaking of arguments through simplified conditionals",
  "rollup@form@tree-shake-curried-functions: Remove side-effect-free curried functions (#1263)",
  "rollup@form@tree-shake-default-exports: properly remove unused default exports@generates es",
  "rollup@form@tree-shake-global-variables: retain Set, Map, WeakSet and WeakMap which called with array arguments",
  "rollup@form@tree-shake-if-statements: tree-shake if-statements with a condition that can be evaluated",
  "rollup@form@tree-shake-logical-expressions: tree-shake unused parts of logical expressions@generates es",
  "rollup@form@tree-shake-object-with-sideeffctful-getter: retain functions that accept a object with a getter that has side effects",
  "rollup@form@tree-shake-optional-chaining-literal: tree-shake expressions optional chaining with literal values",
  "rollup@form@tree-shake-pure-optional-chaining: tree-shake pure call expressions involving optional chaining",
  "rollup@form@treeshake-classes-with-fields: treeshakes classes with class fields (#3564)",
  "rollup@form@treeshake-deterministic-dynamic-import: treeshakes dynamic imports when the target is deterministic",
  "rollup@form@treeshake-excess-arguments@argument-side-effects: retains arguments that have side-effects",
  "rollup@form@treeshake-excess-arguments@arguments-variable: does not remove arguments from call when arguments variables is accessed",
  "rollup@form@treeshake-excess-arguments@arrow-function-arguments: removes unneeded arguments from calls to arrow functions",
  "rollup@form@treeshake-excess-arguments@function-arguments: removes unneeded arguments from calls to functions",
  "rollup@form@treeshake-excess-arguments@namespace-members: removes unneeded arguments across namespace member calls",
  "rollup@form@treeshake-excess-arguments@patterns: removes unneeded arguments from calls when patterns are used",
  "rollup@form@treeshake-excess-arguments@rest-element: does not remove arguments from calls when rest parameters are used",
  "rollup@form@treeshake-excess-arguments@unused-parameters: removes arguments that correspond to unused parameters",
  "rollup@form@treeshake-import-meta: supports tree-shaking for meta properties",
  "rollup@form@treeshake-import-meta-props: also does not include format globals when tree-shaking import meta@generates es",
  "rollup@form@treeshake-json: removes unusued json keys",
  "rollup@form@treeshake-namespace-access: does not count namespace property access as side-effect@generates es",
  "rollup@form@treeshake-presets@preset-with-override: allows using the \"preset\" option with overrides",
  "rollup@form@treeshake-presets@recommended: handles treeshake preset \"recommended\"",
  "rollup@form@treeshake-presets@safest: handles treeshake preset \"safest\"",
  "rollup@form@treeshake-presets@smallest: handles treeshake preset \"smallest\"",
  "rollup@form@treeshake-presets@true: handles treeshake preset true",
  "rollup@form@treeshake-sequence-expressions: removes the last element of a sequence expression if it is unused",
  "rollup@form@try-statement-deoptimization@deactivate-via-option: deactivates try-catch-deoptimization via option",
  "rollup@form@try-statement-deoptimization@direct-inclusion: retains side-effect-free code in try-statement-blocks",
  "rollup@form@try-statement-deoptimization@follow-parameters: retains side-effect-free code in parameters called from try-statement-blocks",
  "rollup@form@try-statement-deoptimization@follow-pattern-parameters: retains side-effect-free code in pattern parameters called from try-statement-blocks",
  "rollup@form@try-statement-deoptimization@follow-variables: does not retain side-effect-free code in functions called from try-statement-blocks",
  "rollup@form@typeof-side-effect: using typeof is does not trigger global side-effects",
  "rollup@form@unary-expressions: handles unary expression side-effects",
  "rollup@form@undefined-var: treeshakes undefined variable literals",
  "rollup@form@unused-called-import: does not include called-in-unused-code import@generates es",
  "rollup@form@unused-called-with-side-effects: does not include called-in-unused-code import@generates es",
  "rollup@form@unused-default-exports: does not name unused-but-included default export@generates es",
  "rollup@form@unused-function-and-class-expressions: properly remove unused function and class expressions@generates es",
  "rollup@form@unused-import: excludes unused imports ([#595])@generates es",
  "rollup@form@unused-inner-functions-and-classes: does not include unused inner functions and classes@generates es",
  "rollup@form@unused-var: omits unused var declaration@generates es",
  "rollup@form@update-expression-side-effects: detect side-effects when dealing with update expressions@generates es"
]